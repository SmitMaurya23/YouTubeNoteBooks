from pydantic import BaseModel, HttpUrl
from typing import List, Optional, Dict
from datetime import datetime

class VideoDescription(BaseModel):
    """
    Pydantic schema for the structured video description generated by the LLM.
    """
    title: str
    keywords: List[str]
    category_tags: List[str]
    detailed_description: List[str]
    summary: str

class TranscriptEntry(BaseModel):
    """Pydantic schema for a single entry in the raw video transcript list."""
    text: str
    start: float
    duration: float

class TimestampEntry(BaseModel):
    """Pydantic schema for a single extracted timestamp result."""
    timestamp: str
    text: str

class TimestampResponse(BaseModel):
    """
    Pydantic schema for the full LLM response, containing a list of timestamps.
    """
    results: List[TimestampEntry]

class ChatMessage(BaseModel):
    """
    Pydantic schema for a single message in the chat history.
    """
    role: str
    content: str

class ChatSession(BaseModel):
    """
    Pydantic schema for a full chat session document in MongoDB
    """

    session_id: str
    user_id: str
    notebook_id: str
    video_id: str
    history: List[ChatMessage]
    created_at: datetime
    updated_at: datetime
    first_prompt: str

class ChatSessionSummary(BaseModel):
    """A summary of a chat session for display purposes"""
    session_id:str
    first_prompt: str
    created_at: datetime
    notebook_id:str



