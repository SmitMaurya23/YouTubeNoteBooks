from pydantic import BaseModel, HttpUrl, Field
from typing import List, Optional, Dict
from datetime import datetime
from bson import ObjectId

class VideoDescription(BaseModel):
    """
    Pydantic schema for the structured video description generated by the LLM.
    """
    title: str
    keywords: List[str]
    category_tags: List[str]
    detailed_description: List[str]
    summary: str

class TranscriptEntry(BaseModel):
    """Pydantic schema for a single entry in the raw video transcript list."""
    text: str
    start: float
    duration: float

class TimestampEntry(BaseModel):
    """Pydantic schema for a single extracted timestamp result."""
    timestamp: str
    text: str

class TimestampResponse(BaseModel):
    """
    Pydantic schema for the full LLM response, containing a list of timestamps.
    """
    results: List[TimestampEntry]

class ChatMessage(BaseModel):
    """
    Pydantic schema for a single message in the chat history.
    """
    role: str
    content: str

class ChatSession(BaseModel):
    """
    Pydantic schema for a full chat session document in MongoDB
    """

    session_id: str
    user_id: str
    notebook_id: str
    video_id: str
    history: List[ChatMessage]
    created_at: datetime
    updated_at: datetime
    first_prompt: str

class ChatSessionSummaryForEndpoint(BaseModel):
    """A summary of a chat session for display purposes"""
    session_id:str
    first_prompt: str
    created_at: datetime
    notebook_id:str



class VideoSubmission(BaseModel):
    url: HttpUrl

class ChatQuery(BaseModel):
    query: str
    video_id: Optional[str] = None # Optional: if you want to limit search to a specific video

class ChatSessionCreation(BaseModel):
    video_id: Optional[str] = None # Optional: if starting a chat specific to a video
    user_id: str = "1" # Default user_id for now

class ChatQueryWithSession(BaseModel):
    query: str
    session_id: str
    video_id: Optional[str] = None # Optional: to ensure context is maintained
    user_id: str = "1" # Default user_id for now

class TimestampQuery(BaseModel):
    query: str
    video_id: str # Video ID is mandatory for timestamp queries

# main.py (add these to your existing Pydantic models)

class UserCreate(BaseModel):
    user_name: str
    user_email: str
    password: str

class UserLogin(BaseModel):
    user_email: str
    password: str

class NotebookCreate(BaseModel):
    user_id: str
    video_id: str
    notebook_title: str

class NotebookUpdate(BaseModel):
    notebook_title: Optional[str] = None
    # Add other fields if you want to update them later, e.g., notes_id_list

class ChatRequest(BaseModel):
    user_query: str
    video_id: str
    notebook_id: str # NEW: Required to link chat to a notebook
    session_id: Optional[str] = None # Optional for starting a new chat

# --- NEW Pydantic Model for ChatSessionSummary (for API response) ---
class ChatSessionSummary(BaseModel):
    session_id: str
    first_prompt: str
    created_at: str # Storing as ISO string

# Define the model for chat interaction, making session_id optional
class ChatInteraction(BaseModel):
    query: str
    video_id: str
    user_id: str
    notebook_id: str # The notebook this chat session belongs to
    session_id: str # THIS IS KEY: session_id is now optional

# Define the response model for chat interactions
class ChatResponse(BaseModel):
    answer: str
    session_id: str # Always return the session_id (new or existing)

class NotebookModel(BaseModel):
    something:str





class VideoDBEntry(BaseModel):
    """
    Pydantic schema for the structured video description generated by the LLM.
    """
    id: ObjectId = Field(default_factory=ObjectId, alias="_id")
    video_id: str
    url: str
    submitted_at: datetime
    transcript: List[TranscriptEntry]
    transcript_text: str
    description: VideoDescription
    updated_at: datetime

    model_config = {
        "arbitrary_types_allowed": True,
        "json_encoders": {
            ObjectId: str,
            datetime: lambda dt: dt.isoformat()
        }
    }

class UserDBEntry(BaseModel):
    id:ObjectId = Field(default_factory=ObjectId, alias="_id")
    user_name:str
    user_email:str
    password:str
    notebook_id_list:List[str]
    created_at:datetime

    model_config = {
        "arbitrary_types_allowed": True,
        "json_encoders": {
            ObjectId: str,
            datetime: lambda dt: dt.isoformat()
        }
    }


class NotebookDBEntry(BaseModel):
    id:ObjectId = Field(default_factory=ObjectId, alias="_id")
    user_id: str
    video_id: str
    notebook_title: str
    session_id_list: List[str]
    latest_session_id: Optional[str]
    notes_id_list:List[str]
    created_at:datetime
    updated_at:datetime

    model_config = {
        "arbitrary_types_allowed": True,
        "json_encoders": {
            ObjectId: str,
            datetime: lambda dt: dt.isoformat()
        }
    }

class VideoEmbeddingDBEntry(BaseModel):
    pass


class ChatSessionDBEntry(BaseModel):
    pass